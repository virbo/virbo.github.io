{"version":3,"sources":["components/helpers/firebase/Config.js","components/pages/firebase/baca.js","serviceWorker.js","index.js"],"names":["Config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","baca","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","_getData","database","on","snap","_data","val","setState","isLoading","chart","version","app","firebase","initializeApp","config","ref","child","state","inherits","createClass","key","value","_this$state","dataChart","map","item","name","label","y","options","colors","plotBackgroundColor","plotBorderWidth","plotShadow","type","title","text","tooltip","pointFormat","plotOptions","pie","allowPointSelect","cursor","dataLabels","enabled","format","style","color","Highcharts","theme","contrastTextColor","series","minPointSize","colorByPoint","data","react_default","a","createElement","highcharts_react_min_default","highcharts","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","firebase_baca","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f71f6a5a.chunk.js","sourcesContent":["const Config = {\n    apiKey: \"AIzaSyC_Qr6vRYJPnlz_j-SPaDQCX5_NN3m2f7k\",\n    authDomain: \"pilpres2019-46961.firebaseapp.com\",\n    databaseURL: \"https://pilpres2019-46961.firebaseio.com\",\n    projectId: \"pilpres2019-46961\",\n    storageBucket: \"pilpres2019-46961.appspot.com\",\n    messagingSenderId: \"149717606481\"\n}\n\nexport default Config","import React, { Component } from 'react'\nimport firebase from 'firebase/app'\nimport 'firebase/database'\n\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nimport {Config as config} from '../../helpers/firebase'\n\nexport class baca extends Component {\n    constructor(props) {\n        super(props)\n        this.app = firebase.initializeApp(config)\n        this.database = this.app.database().ref().child('latest')\n\n        this.state = {\n            isLoading: true,\n            //latest: [],\n            chart: [],\n            //formater: [],\n            version: null,\n            //progress: []\n        }\n    }\n\n    componentDidMount = () => {\n        this._getData()\n    }\n    \n\n    _getData = () => {\n        this.database.on('value', snap => {\n            let _data = snap.val()\n            this.setState({\n                isLoading: false,\n                //latest: _data,\n                chart: _data.chart,\n                //formater: _data.formater,\n                //progress: _data.progress,\n                version: _data.version\n            })\n            //console.log(_data)\n        })\n    }\n\n    render() {\n        const {\n            isLoading,\n            //latest,\n            chart,\n            //formater,\n            //progress,\n            version\n        } = this.state\n        \n        const dataChart = chart.map( (item, key) => {\n            return {\n                name: item.label,\n                y: item.value,\n            }\n        })\n\n        const options = {\n            colors: ['#2ecc71', '#e67e22'],\n            chart: {\n                plotBackgroundColor: null,\n                plotBorderWidth: null,\n                plotShadow: false,\n                type: 'pie'\n            },\n            title: {\n                text: 'Perolehan Suara PILPRES 2019'\n            },\n            tooltip: {\n                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n            },\n            plotOptions: {\n                pie: {\n                    allowPointSelect: true,\n                    cursor: 'pointer',\n                    dataLabels: {\n                        enabled: true,\n                        format: '<b>{point.name}</b>: {point.percentage:.2f} %<br>' + \n                            '<b></b>Perolehan suara</b>: {point.y:,.0f}',\n                        style: {\n                            color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'\n                        }\n                    },\n                    //showInLegend: true\n                }\n            },\n            series: [{\n                minPointSize: 10,\n                name: 'Persentase Suara',\n                //innerSize: '20%',\n                colorByPoint: true,\n                data: dataChart\n            }]\n        }\n\n        //console.log(options)\n        return (\n            <div>\n                {\n                    isLoading ? <p>Loading...</p> : \n                    <div>\n                        <HighchartsReact\n                            highcharts={Highcharts}\n                            options={options}\n                        />\n                        <p>Terakhir diupdate: {version} WIB</p>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default baca\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\n//import App from './components/pages/kpu'\nimport App from './components/pages/firebase/baca'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}